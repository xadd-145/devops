FIRST CONTAINER:
1.In cmd,
i.docker -v
ii.docker run -d -p 80:80 docker/getting-started
2.To check if container is created, 
open localhost:80
3.In cmd do, gives list of containers
 docker ps 
4.To stop this container,
Docker stop container_id
5.Docker prune-used to delete
docker system prune

BUILD IMAGE & HOST:
Deployiong static webpage as a container
Docker can build images automatically by reading the instructions from a Docker file is a test document that contain all the command a user could call on the commandline to assemble an image

A docker image consists of read only layers each of which represents a Dockerfile instructions. The layers are stacked & each one is a delta of the change from the previous layer. 

Consider the Docker file:

Each instructions creates one layer 
FROM creates a layer from the ubuntu:22.04 Docker image
COPY adds files from your Docker clients current directory
RUN builds your application with make 
CMD specifies what command to run within the container

To run a web app using apache2, we used an Ubuntu image as our base image and wrote a
custom Dockerfile to host the sample apache web server homepage.

We can check if our container was created successfully by visiting http://localhost:80/

Step 1 - Create a Directory for the Website
Make sure that you have your HTML files already in the current directory.

Step 2 - Create a file called Dockerfile
Place the following contents into the Dockerfile

FROM nginx:alpine
COPY . /usr/share/nginx/html

Step 3 - Build the Docker Image for the HTML Server
Run the following command:

docker build -t html-server-image:v1 .

You can confirm that this has worked by running the command:

docker images

Step 4 - Run the Docker Container
Run the following command to run the HTML container server:

docker run -d -p 80:80 html-server-image:v1

docker pull httpd 
Go to docker desktop...image create Karo
Run getting started wala line
docker ps
Open webpg
